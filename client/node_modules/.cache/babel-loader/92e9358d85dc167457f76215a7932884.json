{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sujungchoi/Desktop/\\uD83D\\uDC69\\u200D\\uD83D\\uDCBBCodingDojo/MERN/Full_Stack_MERN/product_manager/client/src/views/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport ProductForm from '../components/ProductForm';\nimport ProductList from '../components/ProductList'; // eslint-disable-next-line\n\nexport default _s(() => {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const [loaded, setLoaded] = useState(false); //Create an array to store errors from the API\n\n  const [errors, setErrors] = useState([]);\n  useEffect(() => {\n    axios.get(\"http://localhost:8000/api/products\") // .then(res=>setProducts(res.data.products)) if res.json({products: allProducts}) instead of getting it as an array from controller\n    .then(res => {\n      setProducts(res.data);\n      setLoaded(true);\n    }).catch(err => console.log(\"Error: \", err));\n  }, []);\n\n  const createProduct = product => {\n    axios.post('http://localhost:8000/api/products/new', product).then(res => {\n      console.log(res, \"** New product created\"); //updating state after api call => re-render the page; show the new product created without having to refresh the page\n\n      setProducts([...products, res.data]);\n    }).catch(err => {\n      const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n\n      const errorArr = []; // Define a temp error array to push the messages in\n\n      for (const key of Object.keys(errorResponse)) {\n        // Loop through all errors and get the messages\n        errorArr.push(errorResponse[key].message);\n      } // Set Errors\n\n\n      setErrors(errorArr);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Product Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), errors.map((err, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        \"color\": \"red\"\n      },\n      children: [\" \", err, \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 41\n    }, this)), /*#__PURE__*/_jsxDEV(ProductForm, {\n      onSubmitProp: createProduct,\n      initialTitle: \"\",\n      initialPrice: \"\",\n      initialDescription: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), loaded && /*#__PURE__*/_jsxDEV(ProductList, {\n      products: products\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}, \"M5aX37t4ClZ9dtKvrrwgljrJmG8=\");","map":{"version":3,"sources":["/Users/sujungchoi/Desktop/👩‍💻CodingDojo/MERN/Full_Stack_MERN/product_manager/client/src/views/Main.js"],"names":["React","useEffect","useState","axios","ProductForm","ProductList","products","setProducts","loaded","setLoaded","errors","setErrors","get","then","res","data","catch","err","console","log","createProduct","product","post","errorResponse","response","errorArr","key","Object","keys","push","message","map","index"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CAEA;;AACA,kBAAe,MAAM;AAAA;;AACjB,QAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC,CAFiB,CAGjB;;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVE,IAAAA,KAAK,CAACS,GAAN,CAAU,oCAAV,EACI;AADJ,KAEKC,IAFL,CAEUC,GAAG,IAAE;AACPP,MAAAA,WAAW,CAACO,GAAG,CAACC,IAAL,CAAX;AACAN,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH,KALL,EAMKO,KANL,CAMWC,GAAG,IAAEC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB,CANhB;AAOH,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMG,aAAa,GAAGC,OAAO,IAAI;AAC7BlB,IAAAA,KAAK,CAACmB,IAAN,CAAW,wCAAX,EAAqDD,OAArD,EACKR,IADL,CACUC,GAAG,IAAE;AACPI,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EAAiB,wBAAjB,EADO,CAEP;;AACAP,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcQ,GAAG,CAACC,IAAlB,CAAD,CAAX;AACH,KALL,EAMKC,KANL,CAMWC,GAAG,IAAE;AACR,YAAMM,aAAa,GAAGN,GAAG,CAACO,QAAJ,CAAaT,IAAb,CAAkBL,MAAxC,CADQ,CACwC;;AAChD,YAAMe,QAAQ,GAAG,EAAjB,CAFQ,CAEa;;AACrB,WAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYL,aAAZ,CAAlB,EAA8C;AAAE;AAC5CE,QAAAA,QAAQ,CAACI,IAAT,CAAcN,aAAa,CAACG,GAAD,CAAb,CAAmBI,OAAjC;AACH,OALO,CAMR;;;AACAnB,MAAAA,SAAS,CAACc,QAAD,CAAT;AACH,KAdL;AAgBH,GAjBD;;AAoBA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGKf,MAAM,CAACqB,GAAP,CAAW,CAACd,GAAD,EAAMe,KAAN,kBAAgB;AAAG,MAAA,KAAK,EAAE;AAAC,iBAAS;AAAV,OAAV;AAAA,sBAA0Cf,GAA1C;AAAA,OAAiCe,KAAjC;AAAA;AAAA;AAAA;AAAA,YAA3B,CAHL,eAKI,QAAC,WAAD;AAAa,MAAA,YAAY,EAAEZ,aAA3B;AAA0C,MAAA,YAAY,EAAC,EAAvD;AAA0D,MAAA,YAAY,EAAC,EAAvE;AAA0E,MAAA,kBAAkB,EAAC;AAA7F;AAAA;AAAA;AAAA;AAAA,YALJ,EAMKZ,MAAM,iBAAI,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEF;AAAvB;AAAA;AAAA;AAAA;AAAA,YANf;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA/CD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport ProductForm from '../components/ProductForm'\nimport ProductList from '../components/ProductList';\n\n// eslint-disable-next-line\nexport default () => {\n    const [ products, setProducts ] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    //Create an array to store errors from the API\n    const [errors, setErrors] = useState([]); \n\n    useEffect(()=>{\n        axios.get(\"http://localhost:8000/api/products\")\n            // .then(res=>setProducts(res.data.products)) if res.json({products: allProducts}) instead of getting it as an array from controller\n            .then(res=>{\n                setProducts(res.data)\n                setLoaded(true);\n            })  \n            .catch(err=>console.log(\"Error: \", err))     \n    }, [])\n\n    const createProduct = product => {\n        axios.post('http://localhost:8000/api/products/new', product)\n            .then(res=>{\n                console.log(res, \"** New product created\")\n                //updating state after api call => re-render the page; show the new product created without having to refresh the page\n                setProducts([...products, res.data]);\n            })\n            .catch(err=>{\n                const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n                const errorArr = []; // Define a temp error array to push the messages in\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n                    errorArr.push(errorResponse[key].message)\n                }\n                // Set Errors\n                setErrors(errorArr);\n            })  \n\n    }\n    \n\n    return (\n        <div className=\"mainForm\">\n            <h2>Product Manager</h2>\n\n            {errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n\n            <ProductForm onSubmitProp={createProduct} initialTitle=\"\" initialPrice=\"\" initialDescription=\"\" />\n            {loaded && <ProductList products={products}  /> }\n        </div>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}